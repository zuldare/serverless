AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless

  Sample SAM Template for serverless

Parameters:
  BooksTableName:
    Description: Books DynamoDB table name
    Type: String
    Default: 'books'
  ReviewsTableName:
    Description: Reviews DynamoDB table name
    Type: String
    Default: 'reviews'
  AuthorsTableName:
    Description: Authors DynamoDB table name
    Type: String
    Default: 'authors'

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs14.x

Resources:
  #  AUTHORS
  GetAuthors:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: serverless/
      Handler: authors/getAuthors.handler
      Runtime: nodejs14.x
      Events:
        GetAuthors:
          Type: Api
          Properties:
            Path: /api/v1/authors
            Method: get
      Policies:
        - Version: '2020-10-12'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:Scan'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/authors'

  GetAuthorById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: serverless/
      Handler: authors/getAuthorById.handler
      Runtime: nodejs14.x
      Events:
        GetAuthors:
          Type: Api
          Properties:
            Path: /api/v1/authors/{id}
            Method: get
      Policies:
        - Version: '2020-10-12'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/authors'

  DeleteAuthorById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: serverless/
      Handler: authors/deleteAuthorById.handler
      Runtime: nodejs14.x
      Events:
        GetAuthors:
          Type: Api
          Properties:
            Path: /api/v1/authors/{id}
            Method: delete
      Policies:
        - Version: '2020-10-12'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:DeleteItem'
                - 'dynamodb:GetItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/authors'

  CreateAuthor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: serverless/
      Handler: authors/createAuthor.handler
      Runtime: nodejs14.x
      Events:
        GetAuthors:
          Type: Api
          Properties:
            Path: /api/v1/authors
            Method: post
      Policies:
        - Version: '2020-10-12'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:UpdateItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/books'

# BOOKS
  CreateBook:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: serverless/
      Handler: books/createBook.handler
      Runtime: nodejs14.x
      Events:
        GetAuthors:
          Type: Api
          Properties:
            Path: /api/v1/books
            Method: post
      Policies:
        - Version: '2020-10-12'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:UpdateItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/books'

  GetBooks:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: serverless/
      Handler: books/getBooks.handler
      Runtime: nodejs14.x
      Events:
        GetAuthors:
          Type: Api
          Properties:
            Path: /api/v1/books
            Method: get
      Policies:
        - Version: '2020-10-12'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:Scan'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/books'

  GetBookById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: serverless/
      Handler: books/getBookById.handler
      Runtime: nodejs14.x
      Events:
        GetAuthors:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}
            Method: get
      Policies:
        - Version: '2020-10-12'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/books'

  DeleteBookById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: serverless/
      Handler: books/deleteBookById.handler
      Runtime: nodejs14.x
      Events:
        GetAuthors:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}
            Method: delete
      Policies:
        - Version: '2020-10-12'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:DeleteItem'
                - 'dynamodb:GetItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/books'

# REVIEWS
  CreateReview:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: serverless/
      Handler: reviews/createReview.handler
      Runtime: nodejs14.x
      Events:
        GetAuthors:
          Type: Api
          Properties:
            Path: /api/v1/reviews
            Method: post
      Policies:
        - Version: '2020-10-12'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:PutItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/reviews'
            - Effect: Allow
              Action:
                -   'dynamodb:GetItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/books'

  DeleteReviewById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: serverless/
      Handler: reviews/deleteReviewById.handler
      Runtime: nodejs14.x
      Events:
        GetAuthors:
          Type: Api
          Properties:
            Path: /api/v1/reviews/{id}
            Method: delete
      Policies:
        - Version: '2020-10-12'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:DeleteItem'
                - 'dynamodb:GetItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/reviews'

  GetReviews:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: serverless/
      Handler: reviews/getReviews.handler
      Runtime: nodejs14.x
      Events:
        GetAuthors:
          Type: Api
          Properties:
            Path: /api/v1/reviews
            Method: get
      Policies:
        - Version: '2020-10-12'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:Scan'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/reviews'
# DynamoDB tables
  AuthorsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref AuthorsTableName
      AttributeDefinitions:
        - AttributeName: authorid
          AttributeType: S
      KeySchema:
        - AttributeName: authorid
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  BooksTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref BooksTableName
      AttributeDefinitions:
        - AttributeName: bookid
          AttributeType: S
      KeySchema:
        - AttributeName: bookid
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ReviewsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref ReviewsTableName
      AttributeDefinitions:
        - AttributeName: reviewid
          AttributeType: S
      KeySchema:
        - AttributeName: reviewid
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  # OUTPUTS FOR  AUTHOR API  &  AUTHOR FUNCTIONS
  AuthorsApi:
    Description: "API Gateway endpoint URL for Authors API"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/v1/authors/"

#  GetAuthors:
#    Description: "GetAuthors Lambda Function ARN"
#    Value: !GetAtt GetAuthors.Arn
#  GetAuthorsIamRole:
#    Description: "Implicit IAM Role created for GetAuthors"
#    Value: !GetAtt GetAuthorsRole.Arn
#
#  GetAuthorById:
#    Description: "GetAuthorById Lambda Function ARN"
#    Value: !GetAtt GetAuthorById.Arn
#  GetAuthorByIdIamRole:
#    Description: "Implicit IAM Role created for GetAuthorById"
#    Value: !GetAtt GetAuthorByIdRole.Arn
#
#  DeleteAuthorById:
#    Description: "DeleteAuthorById Lambda Function ARN"
#    Value: !GetAtt DeleteAuthorById.Arn
#  DeleteAuthorByIdIamRole:
#    Description: "Implicit IAM Role created for DeleteAuthorById"
#    Value: !GetAtt DeleteAuthorByIdRole.Arn
#
#  CreateAuthor:
#    Description: "CreateAuthor Lambda Function ARN"
#    Value: !GetAtt CreateAuthor.Arn
#  CreateAuthorIamRole:
#    Description: "Implicit IAM Role created for CreateAuthor"
#    Value: !GetAtt CreateAuthorRole.Arn

  # OUTPUTS FOR BOOKS API  &  BOOKS FUNCTIONS

  BooksApi:
    Description: "API Gateway endpoint URL for Authors API"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/v1/books/"

#  GetBooks:
#    Description: "GetBooks Lambda Function ARN"
#    Value: !GetAtt GetBooks.Arn
#  GetBooksIamRole:
#    Description: "Implicit IAM Role created for GetBooks"
#    Value: !GetAtt GetBooks.Arn
#
#  GetBookById:
#    Description: "GetBookById Lambda Function ARN"
#    Value: !GetAtt GetBookById.Arn
#  GetBookByIdIamRole:
#    Description: "Implicit IAM Role created for GetBookById"
#    Value: !GetAtt GetBookByIdRole.Arn
#
#  DeleteBookById:
#    Description: "DeleteBookById Lambda Function ARN"
#    Value: !GetAtt DeleteBookById.Arn
#  DeleteBookByIdIamRole:
#    Description: "Implicit IAM Role created for DeleteAuthorById"
#    Value: !GetAtt DeleteBookByIdRole.Arn
#
#  CreateBook:
#    Description: "CreateBook Lambda Function ARN"
#    Value: !GetAtt CreateBook.Arn
#  CreateBookIamRole:
#    Description: "Implicit IAM Role created for CreateBook"
#    Value: !GetAtt CreateBookRole.Arn


  # OUTPUTS FOR REVIEWS API  & REVIEWS FUNCTIONS
  ReviewsApi:
    Description: "API Gateway endpoint URL for Reviews API"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/v1/reviews/"

#  CreateReview:
#    Description: "CreateReview Lambda Function ARN"
#    Value: !GetAtt CreateReview.Arn
#  CreateReviewIamRole:
#    Description: "Implicit IAM Role created for CreateReview"
#    Value: !GetAtt CreateReviewRole.Arn
#
#  DeleteReviewByIdReview:
#    Description: "DeleteReviewById Lambda Function ARN"
#    Value: !GetAtt DeleteReviewById.Arn
#  DeleteReviewByIdIamRole:
#    Description: "Implicit IAM Role created for DeleteReviewById"
#    Value: !GetAtt DeleteReviewByIdRole.Arn
#
#
#  GetReviews:
#    Description: "GetReviews Lambda Function ARN"
#    Value: !GetAtt GetReviews.Arn
#  GetReviewsIamRole:
#    Description: "Implicit IAM Role created for GetReviews"
#    Value: !GetAtt GetReviews.Arn